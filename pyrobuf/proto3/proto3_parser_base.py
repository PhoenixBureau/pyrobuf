#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__all__ = [
    'ProtobufParser',
    'ProtobufSemantics',
    'main'
]

KEYWORDS = {
    'false',
    'message',
    'option',
    'true',
}


class ProtobufBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        namechars='',
        **kwargs
    ):
        super(ProtobufBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class ProtobufParser(Parser):
    def __init__(
        self,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='',
        buffer_class=ProtobufBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super(ProtobufParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            buffer_class=buffer_class,
            **kwargs
        )

    @graken()
    def _dot_(self):
        self._token('.')

    @graken()
    def _letter_(self):
        self._pattern(r'[a-zA-Z]')

    @graken()
    def _decimalDigit_(self):
        self._pattern(r'\d')

    @graken()
    def _octalDigit_(self):
        self._pattern(r'[0-7]')

    @graken()
    def _hexDigit_(self):
        self._pattern(r'[0-9A-Fa-f]')

    @graken()
    def _ident_(self):
        self._pattern(r'[a-zA-Z]\w*')
        self._check_name()

    @graken()
    def _fullIdent_(self):

        def sep0():
            with self._group():
                self._dot_()

        def block0():
            self._ident_()
        self._positive_closure(block0, sep=sep0)

    @graken()
    def _messageName_(self):
        self._ident_()

    @graken()
    def _enumName_(self):
        self._ident_()

    @graken()
    def _fieldName_(self):
        self._ident_()

    @graken()
    def _oneofName_(self):
        self._ident_()

    @graken()
    def _mapName_(self):
        self._ident_()

    @graken()
    def _serviceName_(self):
        self._ident_()

    @graken()
    def _rpcName_(self):
        self._ident_()

    @graken()
    def _messageType_(self):
        with self._optional():
            self._dot_()
            self.name_last_node('fully_qualified')

        def block1():
            self._ident_()
            self.add_last_node_to_name('parts')
            self._dot_()
        self._closure(block1)
        self._messageName_()
        self.name_last_node('name')
        self.ast._define(
            ['fully_qualified', 'name'],
            ['parts']
        )

    @graken()
    def _enumType_(self):
        with self._optional():
            self._dot_()
            self.name_last_node('fully_qualified')

        def block1():
            self._ident_()
            self.add_last_node_to_name('parts')
            self._dot_()
        self._closure(block1)
        self._enumName_()
        self.name_last_node('name')
        self.ast._define(
            ['fully_qualified', 'name'],
            ['parts']
        )

    @graken()
    def _intLit_(self):
        with self._choice():
            with self._option():
                self._decimalLit_()
            with self._option():
                self._octalLit_()
            with self._option():
                self._hexLit_()
            self._error('no available options')

    @graken()
    def _decimalLit_(self):
        self._pattern(r'[1-9]\d*')

    @graken()
    def _octalLit_(self):
        self._pattern(r'0[0-7]*')

    @graken()
    def _hexLit_(self):
        self._pattern(r'0[xX][0-9A-Fa-f]+')

    @graken()
    def _floatLit_(self):
        with self._choice():
            with self._option():
                self._pattern(r'-?\d+\.\d*')
            with self._option():
                self._token('inf')
            with self._option():
                self._token('nan')
            self._error('expecting one of: -?\\d+\\.\\d* inf nan')

    @graken()
    def _boolLit_(self):
        with self._choice():
            with self._option():
                self._token('true')
            with self._option():
                self._token('false')
            self._error('expecting one of: false true')

    @graken()
    def _quote_(self):
        with self._choice():
            with self._option():
                self._token("'")
            with self._option():
                self._token('"')
            self._error('expecting one of: " \'')

    @graken()
    def _strLit_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._pattern(r'"(?:[^"\\]|\\.)*"')
                with self._option():
                    self._pattern(r"'(?:[^'\\]|\\.)*'")
                self._error('expecting one of: "(?:[^"\\\\]|\\\\.)*" \'(?:[^\'\\\\]|\\\\.)*\'')

    @graken()
    def _emptyStatement_(self):
        self._token(';')

    @graken()
    def _constant_(self):
        with self._choice():
            with self._option():
                self._fullIdent_()
            with self._option():
                self._intLit_()
            with self._option():
                self._floatLit_()
            with self._option():
                self._strLit_()
            with self._option():
                self._boolLit_()
            self._error('no available options')

    @graken()
    def _syntax_(self):
        self._token('syntax')
        self._token('=')
        with self._group():
            with self._choice():
                with self._option():
                    self._token('"proto3"')
                with self._option():
                    self._token("'proto3'")
                self._error('expecting one of: "proto3" \'proto3\'')
        self._token(';')

    @graken()
    def _import_(self):
        self._token('import')
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('weak')
                with self._option():
                    self._token('public')
                self._error('expecting one of: public weak')
        self._strLit_()
        self.name_last_node('@')
        self._token(';')

    @graken()
    def _package_(self):
        self._token('package')
        self._fullIdent_()
        self.name_last_node('@')
        self._token(';')

    @graken()
    def _option_(self):
        self._token('option')
        self._optionName_()
        self.name_last_node('name')
        self._token('=')
        self._constant_()
        self.name_last_node('value')
        self._token(';')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @graken()
    def _optionName_(self):
        with self._group():
            with self._choice():
                with self._option():
                    self._ident_()
                    self.name_last_node('a')
                with self._option():
                    self._token('(')
                    self._fullIdent_()
                    self.name_last_node('a')
                    self._token(')')
                self._error('no available options')

        def block3():
            self._token('.')
            self._ident_()
            self.add_last_node_to_name('b')
        self._closure(block3)
        self.ast._define(
            ['a'],
            ['b']
        )

    @graken()
    def _type_(self):
        with self._choice():
            with self._option():
                self._token('double')
            with self._option():
                self._token('float')
            with self._option():
                self._token('int32')
            with self._option():
                self._token('int64')
            with self._option():
                self._token('uint32')
            with self._option():
                self._token('uint64')
            with self._option():
                self._token('sint32')
            with self._option():
                self._token('sint64')
            with self._option():
                self._token('fixed32')
            with self._option():
                self._token('fixed64')
            with self._option():
                self._token('sfixed32')
            with self._option():
                self._token('sfixed64')
            with self._option():
                self._token('bool')
            with self._option():
                self._token('string')
            with self._option():
                self._token('bytes')
            with self._option():
                self._messageType_()
            with self._option():
                self._enumType_()
            self._error('expecting one of: bool bytes double fixed32 fixed64 float int32 int64 sfixed32 sfixed64 sint32 sint64 string uint32 uint64')

    @graken()
    def _fieldNumber_(self):
        self._intLit_()

    @graken()
    def _field_(self):
        with self._optional():
            self._token('repeated')
            self.name_last_node('repeated')
        self._type_()
        self.name_last_node('type_')
        self._fieldName_()
        self.name_last_node('name')
        self._token('=')
        self._fieldNumber_()
        self.name_last_node('number')
        with self._optional():
            self._token('[')
            self._fieldOptions_()
            self.name_last_node('options')
            self._token(']')
        self._token(';')
        self.ast._define(
            ['name', 'number', 'options', 'repeated', 'type_'],
            []
        )

    @graken()
    def _fieldOptions_(self):

        def sep0():
            with self._group():
                self._token(',')

        def block0():
            self._fieldOption_()
        self._closure(block0, sep=sep0)

    @graken()
    def _fieldOption_(self):
        self._optionName_()
        self.name_last_node('name')
        self._token('=')
        self._constant_()
        self.name_last_node('value')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @graken()
    def _enum_(self):
        self._token('enum')
        self._enumName_()
        self.name_last_node('name')
        self._enumBody_()
        self.name_last_node('body')
        self.ast._define(
            ['body', 'name'],
            []
        )

    @graken()
    def _enumBody_(self):
        self._token('{')

        def block1():
            with self._choice():
                with self._option():
                    self._option_()
                with self._option():
                    self._enumField_()
                with self._option():
                    self._emptyStatement_()
                self._error('no available options')
        self._closure(block1)
        self.name_last_node('@')
        self._token('}')

    @graken()
    def _enumField_(self):
        self._ident_()
        self.name_last_node('name')
        self._token('=')
        self._intLit_()
        self.name_last_node('number')
        with self._optional():
            self._token('[')
            self._enumOptions_()
            self.name_last_node('options')
            self._token(']')
        self._token(';')
        self.ast._define(
            ['name', 'number', 'options'],
            []
        )

    @graken()
    def _enumValueOption_(self):
        self._optionName_()
        self.name_last_node('name')
        self._token('=')
        self._constant_()
        self.name_last_node('value')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @graken()
    def _enumOptions_(self):

        def sep0():
            with self._group():
                self._token(',')

        def block0():
            self._enumValueOption_()
        self._closure(block0, sep=sep0)

    @graken()
    def _message_(self):
        self._token('message')
        self._messageName_()
        self.name_last_node('name')
        self._messageBody_()
        self.name_last_node('body')
        self.ast._define(
            ['body', 'name'],
            []
        )

    @graken()
    def _messageBody_(self):
        self._token('{')

        def block1():
            with self._choice():
                with self._option():
                    self._field_()
                with self._option():
                    self._enum_()
                with self._option():
                    self._message_()
                with self._option():
                    self._option_()
                with self._option():
                    self._emptyStatement_()
                self._error('no available options')
        self._closure(block1)
        self.name_last_node('@')
        self._token('}')

    @graken()
    def _proto_(self):
        self._syntax_()

        def block1():
            with self._choice():
                with self._option():
                    self._import_()
                with self._option():
                    self._package_()
                with self._option():
                    self._option_()
                with self._option():
                    self._topLevelDef_()
                with self._option():
                    self._emptyStatement_()
                self._error('no available options')
        self._closure(block1)
        self.name_last_node('@')

    @graken()
    def _topLevelDef_(self):
        with self._choice():
            with self._option():
                self._message_()
            with self._option():
                self._enum_()
            self._error('no available options')


class ProtobufSemantics(object):
    def dot(self, ast):
        return ast

    def letter(self, ast):
        return ast

    def decimalDigit(self, ast):
        return ast

    def octalDigit(self, ast):
        return ast

    def hexDigit(self, ast):
        return ast

    def ident(self, ast):
        return ast

    def fullIdent(self, ast):
        return ast

    def messageName(self, ast):
        return ast

    def enumName(self, ast):
        return ast

    def fieldName(self, ast):
        return ast

    def oneofName(self, ast):
        return ast

    def mapName(self, ast):
        return ast

    def serviceName(self, ast):
        return ast

    def rpcName(self, ast):
        return ast

    def messageType(self, ast):
        return ast

    def enumType(self, ast):
        return ast

    def intLit(self, ast):
        return ast

    def decimalLit(self, ast):
        return ast

    def octalLit(self, ast):
        return ast

    def hexLit(self, ast):
        return ast

    def floatLit(self, ast):
        return ast

    def boolLit(self, ast):
        return ast

    def quote(self, ast):
        return ast

    def strLit(self, ast):
        return ast

    def emptyStatement(self, ast):
        return ast

    def constant(self, ast):
        return ast

    def syntax(self, ast):
        return ast

    def import_(self, ast):
        return ast

    def package(self, ast):
        return ast

    def option(self, ast):
        return ast

    def optionName(self, ast):
        return ast

    def type(self, ast):
        return ast

    def fieldNumber(self, ast):
        return ast

    def field(self, ast):
        return ast

    def fieldOptions(self, ast):
        return ast

    def fieldOption(self, ast):
        return ast

    def enum(self, ast):
        return ast

    def enumBody(self, ast):
        return ast

    def enumField(self, ast):
        return ast

    def enumValueOption(self, ast):
        return ast

    def enumOptions(self, ast):
        return ast

    def message(self, ast):
        return ast

    def messageBody(self, ast):
        return ast

    def proto(self, ast):
        return ast

    def topLevelDef(self, ast):
        return ast


def main(filename, startrule, **kwargs):
    with open(filename) as f:
        text = f.read()
    parser = ProtobufParser(parseinfo=False)
    return parser.parse(text, startrule, filename=filename, **kwargs)

if __name__ == '__main__':
    import json
    ast = generic_main(main, ProtobufParser, name='Protobuf')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
